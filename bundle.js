(()=>{"use strict";var e={895:()=>{"function"!=typeof Object.assign&&(Object.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(!e)throw TypeError("Cannot convert undefined or null to object");for(var a=function(t){t&&Object.keys(t).forEach((function(n){return e[n]=t[n]}))},i=0,o=t;i<o.length;i++)a(o[i]);return e})}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,n),o.exports}(()=>{var e=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange","onPreCalendarPosition"],t={_disable:[],allowInput:!1,allowInvalidPreload:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",autoFillDefaultTime:!0,clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enableSeconds:!1,enableTime:!1,errorHandler:function(e){return"undefined"!=typeof console&&console.warn(e)},getWeek:function(e){var t=new Date(e.getTime());t.setHours(0,0,0,0),t.setDate(t.getDate()+3-(t.getDay()+6)%7);var n=new Date(t.getFullYear(),0,4);return 1+Math.round(((t.getTime()-n.getTime())/864e5-3+(n.getDay()+6)%7)/7)},hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",monthSelectorType:"dropdown",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,now:new Date,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],onPreCalendarPosition:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,showMonths:1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},a={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"],yearAriaLabel:"Year",monthAriaLabel:"Month",hourAriaLabel:"Hour",minuteAriaLabel:"Minute",time_24hr:!1};const i=a;var o=function(e,t){return void 0===t&&(t=2),("000"+e).slice(-1*t)},r=function(e){return!0===e?1:0};function l(e,t){var n;return function(){var a=this,i=arguments;clearTimeout(n),n=setTimeout((function(){return e.apply(a,i)}),t)}}var c=function(e){return e instanceof Array?e:[e]};function d(e,t,n){if(!0===n)return e.classList.add(t);e.classList.remove(t)}function s(e,t,n){var a=window.document.createElement(e);return t=t||"",n=n||"",a.className=t,void 0!==n&&(a.textContent=n),a}function u(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function f(e,t){return t(e)?e:e.parentNode?f(e.parentNode,t):void 0}function m(e,t){var n=s("div","numInputWrapper"),a=s("input","numInput "+e),i=s("span","arrowUp"),o=s("span","arrowDown");if(-1===navigator.userAgent.indexOf("MSIE 9.0")?a.type="number":(a.type="text",a.pattern="\\d*"),void 0!==t)for(var r in t)a.setAttribute(r,t[r]);return n.appendChild(a),n.appendChild(i),n.appendChild(o),n}function p(e){try{return"function"==typeof e.composedPath?e.composedPath()[0]:e.target}catch(t){return e.target}}var g=function(){},h=function(e,t,n){return n.months[t?"shorthand":"longhand"][e]},v={D:g,F:function(e,t,n){e.setMonth(n.months.longhand.indexOf(t))},G:function(e,t){e.setHours((e.getHours()>=12?12:0)+parseFloat(t))},H:function(e,t){e.setHours(parseFloat(t))},J:function(e,t){e.setDate(parseFloat(t))},K:function(e,t,n){e.setHours(e.getHours()%12+12*r(new RegExp(n.amPM[1],"i").test(t)))},M:function(e,t,n){e.setMonth(n.months.shorthand.indexOf(t))},S:function(e,t){e.setSeconds(parseFloat(t))},U:function(e,t){return new Date(1e3*parseFloat(t))},W:function(e,t,n){var a=parseInt(t),i=new Date(e.getFullYear(),0,2+7*(a-1),0,0,0,0);return i.setDate(i.getDate()-i.getDay()+n.firstDayOfWeek),i},Y:function(e,t){e.setFullYear(parseFloat(t))},Z:function(e,t){return new Date(t)},d:function(e,t){e.setDate(parseFloat(t))},h:function(e,t){e.setHours((e.getHours()>=12?12:0)+parseFloat(t))},i:function(e,t){e.setMinutes(parseFloat(t))},j:function(e,t){e.setDate(parseFloat(t))},l:g,m:function(e,t){e.setMonth(parseFloat(t)-1)},n:function(e,t){e.setMonth(parseFloat(t)-1)},s:function(e,t){e.setSeconds(parseFloat(t))},u:function(e,t){return new Date(parseFloat(t))},w:g,y:function(e,t){e.setFullYear(2e3+parseFloat(t))}},D={D:"",F:"",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"",M:"",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",u:"(.+)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},C={Z:function(e){return e.toISOString()},D:function(e,t,n){return t.weekdays.shorthand[C.w(e,t,n)]},F:function(e,t,n){return h(C.n(e,t,n)-1,!1,t)},G:function(e,t,n){return o(C.h(e,t,n))},H:function(e){return o(e.getHours())},J:function(e,t){return void 0!==t.ordinal?e.getDate()+t.ordinal(e.getDate()):e.getDate()},K:function(e,t){return t.amPM[r(e.getHours()>11)]},M:function(e,t){return h(e.getMonth(),!0,t)},S:function(e){return o(e.getSeconds())},U:function(e){return e.getTime()/1e3},W:function(e,t,n){return n.getWeek(e)},Y:function(e){return o(e.getFullYear(),4)},d:function(e){return o(e.getDate())},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return o(e.getMinutes())},j:function(e){return e.getDate()},l:function(e,t){return t.weekdays.longhand[e.getDay()]},m:function(e){return o(e.getMonth()+1)},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},u:function(e){return e.getTime()},w:function(e){return e.getDay()},y:function(e){return String(e.getFullYear()).substring(2)}},y=function(e){var n=e.config,i=void 0===n?t:n,o=e.l10n,r=void 0===o?a:o,l=e.isMobile,c=void 0!==l&&l;return function(e,t,n){var a=n||r;return void 0===i.formatDate||c?t.split("").map((function(t,n,o){return C[t]&&"\\"!==o[n-1]?C[t](e,a,i):"\\"!==t?t:""})).join(""):i.formatDate(e,t,a)}},w=function(e){var n=e.config,i=void 0===n?t:n,o=e.l10n,r=void 0===o?a:o;return function(e,n,a,o){if(0===e||e){var l,c=o||r,d=e;if(e instanceof Date)l=new Date(e.getTime());else if("string"!=typeof e&&void 0!==e.toFixed)l=new Date(e);else if("string"==typeof e){var s=n||(i||t).dateFormat,u=String(e).trim();if("today"===u)l=new Date,a=!0;else if(i&&i.parseDate)l=i.parseDate(e,s);else if(/Z$/.test(u)||/GMT$/.test(u))l=new Date(e);else{for(var f=void 0,m=[],p=0,g=0,h="";p<s.length;p++){var C=s[p],y="\\"===C,w="\\"===s[p-1]||y;if(D[C]&&!w){h+=D[C];var b=new RegExp(h).exec(e);b&&(f=!0)&&m["Y"!==C?"push":"unshift"]({fn:v[C],val:b[++g]})}else y||(h+=".")}l=i&&i.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0),m.forEach((function(e){var t=e.fn,n=e.val;return l=t(l,n,c)||l})),l=f?l:void 0}}if(l instanceof Date&&!isNaN(l.getTime()))return!0===a&&l.setHours(0,0,0,0),l;i.errorHandler(new Error("Invalid date provided: "+d))}}};function b(e,t,n){return void 0===n&&(n=!0),!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime()}var M=function(e,t,n){return e>Math.min(t,n)&&e<Math.max(t,n)},E=function(e,t,n){return 3600*e+60*t+n},x=function(e){var t=Math.floor(e/3600),n=(e-3600*t)/60;return[t,n,e-3600*t-60*n]},k={DAY:864e5};function T(e){var t=e.defaultHour,n=e.defaultMinute,a=e.defaultSeconds;if(void 0!==e.minDate){var i=e.minDate.getHours(),o=e.minDate.getMinutes(),r=e.minDate.getSeconds();t<i&&(t=i),t===i&&n<o&&(n=o),t===i&&n===o&&a<r&&(a=e.minDate.getSeconds())}if(void 0!==e.maxDate){var l=e.maxDate.getHours(),c=e.maxDate.getMinutes();(t=Math.min(t,l))===l&&(n=Math.min(c,n)),t===l&&n===c&&(a=e.maxDate.getSeconds())}return{hours:t,minutes:n,seconds:a}}n(895);var S=function(){return S=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},S.apply(this,arguments)},I=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var a=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],r=0,l=o.length;r<l;r++,i++)a[i]=o[r];return a},_=300;function O(n,a){var g={config:S(S({},t),A.defaultConfig),l10n:i};function v(){var e;return(null===(e=g.calendarContainer)||void 0===e?void 0:e.getRootNode()).activeElement||document.activeElement}function C(e){return e.bind(g)}function O(){var e=g.config;!1===e.weekNumbers&&1===e.showMonths||!0!==e.noCalendar&&window.requestAnimationFrame((function(){if(void 0!==g.calendarContainer&&(g.calendarContainer.style.visibility="hidden",g.calendarContainer.style.display="block"),void 0!==g.daysContainer){var t=(g.days.offsetWidth+1)*e.showMonths;g.daysContainer.style.width=t+"px",g.calendarContainer.style.width=t+(void 0!==g.weekWrapper?g.weekWrapper.offsetWidth:0)+"px",g.calendarContainer.style.removeProperty("visibility"),g.calendarContainer.style.removeProperty("display")}}))}function F(e){if(0===g.selectedDates.length){var t=void 0===g.config.minDate||b(new Date,g.config.minDate)>=0?new Date:new Date(g.config.minDate.getTime()),n=T(g.config);t.setHours(n.hours,n.minutes,n.seconds,t.getMilliseconds()),g.selectedDates=[t],g.latestSelectedDateObj=t}void 0!==e&&"blur"!==e.type&&function(e){e.preventDefault();var t="keydown"===e.type,n=p(e),a=n;void 0!==g.amPM&&n===g.amPM&&(g.amPM.textContent=g.l10n.amPM[r(g.amPM.textContent===g.l10n.amPM[0])]);var i=parseFloat(a.getAttribute("min")),l=parseFloat(a.getAttribute("max")),c=parseFloat(a.getAttribute("step")),d=parseInt(a.value,10),s=d+c*(e.delta||(t?38===e.which?1:-1:0));if(void 0!==a.value&&2===a.value.length){var u=a===g.hourElement,f=a===g.minuteElement;s<i?(s=l+s+r(!u)+(r(u)&&r(!g.amPM)),f&&B(void 0,-1,g.hourElement)):s>l&&(s=a===g.hourElement?s-l-r(!g.amPM):i,f&&B(void 0,1,g.hourElement)),g.amPM&&u&&(1===c?s+d===23:Math.abs(s-d)>c)&&(g.amPM.textContent=g.l10n.amPM[r(g.amPM.textContent===g.l10n.amPM[0])]),a.value=o(s)}}(e);var a=g._input.value;N(),ke(),g._input.value!==a&&g._debouncedChange()}function N(){if(void 0!==g.hourElement&&void 0!==g.minuteElement){var e,t,n=(parseInt(g.hourElement.value.slice(-2),10)||0)%24,a=(parseInt(g.minuteElement.value,10)||0)%60,i=void 0!==g.secondElement?(parseInt(g.secondElement.value,10)||0)%60:0;void 0!==g.amPM&&(e=n,t=g.amPM.textContent,n=e%12+12*r(t===g.l10n.amPM[1]));var o=void 0!==g.config.minTime||g.config.minDate&&g.minDateHasTime&&g.latestSelectedDateObj&&0===b(g.latestSelectedDateObj,g.config.minDate,!0),l=void 0!==g.config.maxTime||g.config.maxDate&&g.maxDateHasTime&&g.latestSelectedDateObj&&0===b(g.latestSelectedDateObj,g.config.maxDate,!0);if(void 0!==g.config.maxTime&&void 0!==g.config.minTime&&g.config.minTime>g.config.maxTime){var c=E(g.config.minTime.getHours(),g.config.minTime.getMinutes(),g.config.minTime.getSeconds()),d=E(g.config.maxTime.getHours(),g.config.maxTime.getMinutes(),g.config.maxTime.getSeconds()),s=E(n,a,i);if(s>d&&s<c){var u=x(c);n=u[0],a=u[1],i=u[2]}}else{if(l){var f=void 0!==g.config.maxTime?g.config.maxTime:g.config.maxDate;(n=Math.min(n,f.getHours()))===f.getHours()&&(a=Math.min(a,f.getMinutes())),a===f.getMinutes()&&(i=Math.min(i,f.getSeconds()))}if(o){var m=void 0!==g.config.minTime?g.config.minTime:g.config.minDate;(n=Math.max(n,m.getHours()))===m.getHours()&&a<m.getMinutes()&&(a=m.getMinutes()),a===m.getMinutes()&&(i=Math.max(i,m.getSeconds()))}}Y(n,a,i)}}function P(e){var t=e||g.latestSelectedDateObj;t&&t instanceof Date&&Y(t.getHours(),t.getMinutes(),t.getSeconds())}function Y(e,t,n){void 0!==g.latestSelectedDateObj&&g.latestSelectedDateObj.setHours(e%24,t,n||0,0),g.hourElement&&g.minuteElement&&!g.isMobile&&(g.hourElement.value=o(g.config.time_24hr?e:(12+e)%12+12*r(e%12==0)),g.minuteElement.value=o(t),void 0!==g.amPM&&(g.amPM.textContent=g.l10n.amPM[r(e>=12)]),void 0!==g.secondElement&&(g.secondElement.value=o(n)))}function L(e){var t=p(e),n=parseInt(t.value)+(e.delta||0);(n/1e3>1||"Enter"===e.key&&!/[^\d]/.test(n.toString()))&&ae(n)}function H(e,t,n,a){return t instanceof Array?t.forEach((function(t){return H(e,t,n,a)})):e instanceof Array?e.forEach((function(e){return H(e,t,n,a)})):(e.addEventListener(t,n,a),void g._handlers.push({remove:function(){return e.removeEventListener(t,n,a)}}))}function j(){we("onChange")}function R(e,t){var n=void 0!==e?g.parseDate(e):g.latestSelectedDateObj||(g.config.minDate&&g.config.minDate>g.now?g.config.minDate:g.config.maxDate&&g.config.maxDate<g.now?g.config.maxDate:g.now),a=g.currentYear,i=g.currentMonth;try{void 0!==n&&(g.currentYear=n.getFullYear(),g.currentMonth=n.getMonth())}catch(e){e.message="Invalid date supplied: "+n,g.config.errorHandler(e)}t&&g.currentYear!==a&&(we("onYearChange"),z()),!t||g.currentYear===a&&g.currentMonth===i||we("onMonthChange"),g.redraw()}function W(e){var t=p(e);~t.className.indexOf("arrow")&&B(e,t.classList.contains("arrowUp")?1:-1)}function B(e,t,n){var a=e&&p(e),i=n||a&&a.parentNode&&a.parentNode.firstChild,o=be("increment");o.delta=t,i&&i.dispatchEvent(o)}function $(e,t,n,a){var i=ie(t,!0),o=s("span",e,t.getDate().toString());return o.dateObj=t,o.$i=a,o.setAttribute("aria-label",g.formatDate(t,g.config.ariaDateFormat)),-1===e.indexOf("hidden")&&0===b(t,g.now)&&(g.todayDateElem=o,o.classList.add("today"),o.setAttribute("aria-current","date")),i?(o.tabIndex=-1,Me(t)&&(o.classList.add("selected"),g.selectedDateElem=o,"range"===g.config.mode&&(d(o,"startRange",g.selectedDates[0]&&0===b(t,g.selectedDates[0],!0)),d(o,"endRange",g.selectedDates[1]&&0===b(t,g.selectedDates[1],!0)),"nextMonthDay"===e&&o.classList.add("inRange")))):o.classList.add("flatpickr-disabled"),"range"===g.config.mode&&function(e){return!("range"!==g.config.mode||g.selectedDates.length<2)&&b(e,g.selectedDates[0])>=0&&b(e,g.selectedDates[1])<=0}(t)&&!Me(t)&&o.classList.add("inRange"),g.weekNumbers&&1===g.config.showMonths&&"prevMonthDay"!==e&&a%7==6&&g.weekNumbers.insertAdjacentHTML("beforeend","<span class='flatpickr-day'>"+g.config.getWeek(t)+"</span>"),we("onDayCreate",o),o}function q(e){e.focus(),"range"===g.config.mode&&ce(e)}function J(e){for(var t=e>0?0:g.config.showMonths-1,n=e>0?g.config.showMonths:-1,a=t;a!=n;a+=e)for(var i=g.daysContainer.children[a],o=e>0?0:i.children.length-1,r=e>0?i.children.length:-1,l=o;l!=r;l+=e){var c=i.children[l];if(-1===c.className.indexOf("hidden")&&ie(c.dateObj))return c}}function K(e,t){var n=v(),a=oe(n||document.body),i=void 0!==e?e:a?n:void 0!==g.selectedDateElem&&oe(g.selectedDateElem)?g.selectedDateElem:void 0!==g.todayDateElem&&oe(g.todayDateElem)?g.todayDateElem:J(t>0?1:-1);void 0===i?g._input.focus():a?function(e,t){for(var n=-1===e.className.indexOf("Month")?e.dateObj.getMonth():g.currentMonth,a=t>0?g.config.showMonths:-1,i=t>0?1:-1,o=n-g.currentMonth;o!=a;o+=i)for(var r=g.daysContainer.children[o],l=n-g.currentMonth===o?e.$i+t:t<0?r.children.length-1:0,c=r.children.length,d=l;d>=0&&d<c&&d!=(t>0?c:-1);d+=i){var s=r.children[d];if(-1===s.className.indexOf("hidden")&&ie(s.dateObj)&&Math.abs(e.$i-d)>=Math.abs(t))return q(s)}g.changeMonth(i),K(J(i),0)}(i,t):q(i)}function U(e,t){for(var n=(new Date(e,t,1).getDay()-g.l10n.firstDayOfWeek+7)%7,a=g.utils.getDaysInMonth((t-1+12)%12,e),i=g.utils.getDaysInMonth(t,e),o=window.document.createDocumentFragment(),r=g.config.showMonths>1,l=r?"prevMonthDay hidden":"prevMonthDay",c=r?"nextMonthDay hidden":"nextMonthDay",d=a+1-n,u=0;d<=a;d++,u++)o.appendChild($("flatpickr-day "+l,new Date(e,t-1,d),0,u));for(d=1;d<=i;d++,u++)o.appendChild($("flatpickr-day",new Date(e,t,d),0,u));for(var f=i+1;f<=42-n&&(1===g.config.showMonths||u%7!=0);f++,u++)o.appendChild($("flatpickr-day "+c,new Date(e,t+1,f%i),0,u));var m=s("div","dayContainer");return m.appendChild(o),m}function V(){if(void 0!==g.daysContainer){u(g.daysContainer),g.weekNumbers&&u(g.weekNumbers);for(var e=document.createDocumentFragment(),t=0;t<g.config.showMonths;t++){var n=new Date(g.currentYear,g.currentMonth,1);n.setMonth(g.currentMonth+t),e.appendChild(U(n.getFullYear(),n.getMonth()))}g.daysContainer.appendChild(e),g.days=g.daysContainer.firstChild,"range"===g.config.mode&&1===g.selectedDates.length&&ce()}}function z(){if(!(g.config.showMonths>1||"dropdown"!==g.config.monthSelectorType)){var e=function(e){return!(void 0!==g.config.minDate&&g.currentYear===g.config.minDate.getFullYear()&&e<g.config.minDate.getMonth()||void 0!==g.config.maxDate&&g.currentYear===g.config.maxDate.getFullYear()&&e>g.config.maxDate.getMonth())};g.monthsDropdownContainer.tabIndex=-1,g.monthsDropdownContainer.innerHTML="";for(var t=0;t<12;t++)if(e(t)){var n=s("option","flatpickr-monthDropdown-month");n.value=new Date(g.currentYear,t).getMonth().toString(),n.textContent=h(t,g.config.shorthandCurrentMonth,g.l10n),n.tabIndex=-1,g.currentMonth===t&&(n.selected=!0),g.monthsDropdownContainer.appendChild(n)}}}function G(){var e,t=s("div","flatpickr-month"),n=window.document.createDocumentFragment();g.config.showMonths>1||"static"===g.config.monthSelectorType?e=s("span","cur-month"):(g.monthsDropdownContainer=s("select","flatpickr-monthDropdown-months"),g.monthsDropdownContainer.setAttribute("aria-label",g.l10n.monthAriaLabel),H(g.monthsDropdownContainer,"change",(function(e){var t=p(e),n=parseInt(t.value,10);g.changeMonth(n-g.currentMonth),we("onMonthChange")})),z(),e=g.monthsDropdownContainer);var a=m("cur-year",{tabindex:"-1"}),i=a.getElementsByTagName("input")[0];i.setAttribute("aria-label",g.l10n.yearAriaLabel),g.config.minDate&&i.setAttribute("min",g.config.minDate.getFullYear().toString()),g.config.maxDate&&(i.setAttribute("max",g.config.maxDate.getFullYear().toString()),i.disabled=!!g.config.minDate&&g.config.minDate.getFullYear()===g.config.maxDate.getFullYear());var o=s("div","flatpickr-current-month");return o.appendChild(e),o.appendChild(a),n.appendChild(o),t.appendChild(n),{container:t,yearElement:i,monthElement:e}}function Z(){u(g.monthNav),g.monthNav.appendChild(g.prevMonthNav),g.config.showMonths&&(g.yearElements=[],g.monthElements=[]);for(var e=g.config.showMonths;e--;){var t=G();g.yearElements.push(t.yearElement),g.monthElements.push(t.monthElement),g.monthNav.appendChild(t.container)}g.monthNav.appendChild(g.nextMonthNav)}function Q(){g.weekdayContainer?u(g.weekdayContainer):g.weekdayContainer=s("div","flatpickr-weekdays");for(var e=g.config.showMonths;e--;){var t=s("div","flatpickr-weekdaycontainer");g.weekdayContainer.appendChild(t)}return X(),g.weekdayContainer}function X(){if(g.weekdayContainer){var e=g.l10n.firstDayOfWeek,t=I(g.l10n.weekdays.shorthand);e>0&&e<t.length&&(t=I(t.splice(e,t.length),t.splice(0,e)));for(var n=g.config.showMonths;n--;)g.weekdayContainer.children[n].innerHTML="\n      <span class='flatpickr-weekday'>\n        "+t.join("</span><span class='flatpickr-weekday'>")+"\n      </span>\n      "}}function ee(e,t){void 0===t&&(t=!0);var n=t?e:e-g.currentMonth;n<0&&!0===g._hidePrevMonthArrow||n>0&&!0===g._hideNextMonthArrow||(g.currentMonth+=n,(g.currentMonth<0||g.currentMonth>11)&&(g.currentYear+=g.currentMonth>11?1:-1,g.currentMonth=(g.currentMonth+12)%12,we("onYearChange"),z()),V(),we("onMonthChange"),Ee())}function te(e){return g.calendarContainer.contains(e)}function ne(e){if(g.isOpen&&!g.config.inline){var t=p(e),n=te(t),a=!(t===g.input||t===g.altInput||g.element.contains(t)||e.path&&e.path.indexOf&&(~e.path.indexOf(g.input)||~e.path.indexOf(g.altInput))||n||te(e.relatedTarget)),i=!g.config.ignoredFocusElements.some((function(e){return e.contains(t)}));a&&i&&(g.config.allowInput&&g.setDate(g._input.value,!1,g.config.altInput?g.config.altFormat:g.config.dateFormat),void 0!==g.timeContainer&&void 0!==g.minuteElement&&void 0!==g.hourElement&&""!==g.input.value&&void 0!==g.input.value&&F(),g.close(),g.config&&"range"===g.config.mode&&1===g.selectedDates.length&&g.clear(!1))}}function ae(e){if(!(!e||g.config.minDate&&e<g.config.minDate.getFullYear()||g.config.maxDate&&e>g.config.maxDate.getFullYear())){var t=e,n=g.currentYear!==t;g.currentYear=t||g.currentYear,g.config.maxDate&&g.currentYear===g.config.maxDate.getFullYear()?g.currentMonth=Math.min(g.config.maxDate.getMonth(),g.currentMonth):g.config.minDate&&g.currentYear===g.config.minDate.getFullYear()&&(g.currentMonth=Math.max(g.config.minDate.getMonth(),g.currentMonth)),n&&(g.redraw(),we("onYearChange"),z())}}function ie(e,t){var n;void 0===t&&(t=!0);var a=g.parseDate(e,void 0,t);if(g.config.minDate&&a&&b(a,g.config.minDate,void 0!==t?t:!g.minDateHasTime)<0||g.config.maxDate&&a&&b(a,g.config.maxDate,void 0!==t?t:!g.maxDateHasTime)>0)return!1;if(!g.config.enable&&0===g.config.disable.length)return!0;if(void 0===a)return!1;for(var i=!!g.config.enable,o=null!==(n=g.config.enable)&&void 0!==n?n:g.config.disable,r=0,l=void 0;r<o.length;r++){if("function"==typeof(l=o[r])&&l(a))return i;if(l instanceof Date&&void 0!==a&&l.getTime()===a.getTime())return i;if("string"==typeof l){var c=g.parseDate(l,void 0,!0);return c&&c.getTime()===a.getTime()?i:!i}if("object"==typeof l&&void 0!==a&&l.from&&l.to&&a.getTime()>=l.from.getTime()&&a.getTime()<=l.to.getTime())return i}return!i}function oe(e){return void 0!==g.daysContainer&&-1===e.className.indexOf("hidden")&&-1===e.className.indexOf("flatpickr-disabled")&&g.daysContainer.contains(e)}function re(e){var t=e.target===g._input,n=g._input.value.trimEnd()!==xe();!t||!n||e.relatedTarget&&te(e.relatedTarget)||g.setDate(g._input.value,!0,e.target===g.altInput?g.config.altFormat:g.config.dateFormat)}function le(e){var t=p(e),a=g.config.wrap?n.contains(t):t===g._input,i=g.config.allowInput,o=g.isOpen&&(!i||!a),r=g.config.inline&&a&&!i;if(13===e.keyCode&&a){if(i)return g.setDate(g._input.value,!0,t===g.altInput?g.config.altFormat:g.config.dateFormat),g.close(),t.blur();g.open()}else if(te(t)||o||r){var l=!!g.timeContainer&&g.timeContainer.contains(t);switch(e.keyCode){case 13:l?(e.preventDefault(),F(),ge()):he(e);break;case 27:e.preventDefault(),ge();break;case 8:case 46:a&&!g.config.allowInput&&(e.preventDefault(),g.clear());break;case 37:case 39:if(l||a)g.hourElement&&g.hourElement.focus();else{e.preventDefault();var c=v();if(void 0!==g.daysContainer&&(!1===i||c&&oe(c))){var d=39===e.keyCode?1:-1;e.ctrlKey?(e.stopPropagation(),ee(d),K(J(1),0)):K(void 0,d)}}break;case 38:case 40:e.preventDefault();var s=40===e.keyCode?1:-1;g.daysContainer&&void 0!==t.$i||t===g.input||t===g.altInput?e.ctrlKey?(e.stopPropagation(),ae(g.currentYear-s),K(J(1),0)):l||K(void 0,7*s):t===g.currentYearElement?ae(g.currentYear-s):g.config.enableTime&&(!l&&g.hourElement&&g.hourElement.focus(),F(e),g._debouncedChange());break;case 9:if(l){var u=[g.hourElement,g.minuteElement,g.secondElement,g.amPM].concat(g.pluginElements).filter((function(e){return e})),f=u.indexOf(t);if(-1!==f){var m=u[f+(e.shiftKey?-1:1)];e.preventDefault(),(m||g._input).focus()}}else!g.config.noCalendar&&g.daysContainer&&g.daysContainer.contains(t)&&e.shiftKey&&(e.preventDefault(),g._input.focus())}}if(void 0!==g.amPM&&t===g.amPM)switch(e.key){case g.l10n.amPM[0].charAt(0):case g.l10n.amPM[0].charAt(0).toLowerCase():g.amPM.textContent=g.l10n.amPM[0],N(),ke();break;case g.l10n.amPM[1].charAt(0):case g.l10n.amPM[1].charAt(0).toLowerCase():g.amPM.textContent=g.l10n.amPM[1],N(),ke()}(a||te(t))&&we("onKeyDown",e)}function ce(e,t){if(void 0===t&&(t="flatpickr-day"),1===g.selectedDates.length&&(!e||e.classList.contains(t)&&!e.classList.contains("flatpickr-disabled"))){for(var n=e?e.dateObj.getTime():g.days.firstElementChild.dateObj.getTime(),a=g.parseDate(g.selectedDates[0],void 0,!0).getTime(),i=Math.min(n,g.selectedDates[0].getTime()),o=Math.max(n,g.selectedDates[0].getTime()),r=!1,l=0,c=0,d=i;d<o;d+=k.DAY)ie(new Date(d),!0)||(r=r||d>i&&d<o,d<a&&(!l||d>l)?l=d:d>a&&(!c||d<c)&&(c=d));Array.from(g.rContainer.querySelectorAll("*:nth-child(-n+"+g.config.showMonths+") > ."+t)).forEach((function(t){var i=t.dateObj.getTime(),o=l>0&&i<l||c>0&&i>c;if(o)return t.classList.add("notAllowed"),void["inRange","startRange","endRange"].forEach((function(e){t.classList.remove(e)}));r&&!o||(["startRange","inRange","endRange","notAllowed"].forEach((function(e){t.classList.remove(e)})),void 0!==e&&(e.classList.add(n<=g.selectedDates[0].getTime()?"startRange":"endRange"),a<n&&i===a?t.classList.add("startRange"):a>n&&i===a&&t.classList.add("endRange"),i>=l&&(0===c||i<=c)&&M(i,a,n)&&t.classList.add("inRange")))}))}}function de(){!g.isOpen||g.config.static||g.config.inline||me()}function se(e){return function(t){var n=g.config["_"+e+"Date"]=g.parseDate(t,g.config.dateFormat),a=g.config["_"+("min"===e?"max":"min")+"Date"];void 0!==n&&(g["min"===e?"minDateHasTime":"maxDateHasTime"]=n.getHours()>0||n.getMinutes()>0||n.getSeconds()>0),g.selectedDates&&(g.selectedDates=g.selectedDates.filter((function(e){return ie(e)})),g.selectedDates.length||"min"!==e||P(n),ke()),g.daysContainer&&(pe(),void 0!==n?g.currentYearElement[e]=n.getFullYear().toString():g.currentYearElement.removeAttribute(e),g.currentYearElement.disabled=!!a&&void 0!==n&&a.getFullYear()===n.getFullYear())}}function ue(){return g.config.wrap?n.querySelector("[data-input]"):n}function fe(){"object"!=typeof g.config.locale&&void 0===A.l10ns[g.config.locale]&&g.config.errorHandler(new Error("flatpickr: invalid locale "+g.config.locale)),g.l10n=S(S({},A.l10ns.default),"object"==typeof g.config.locale?g.config.locale:"default"!==g.config.locale?A.l10ns[g.config.locale]:void 0),D.D="("+g.l10n.weekdays.shorthand.join("|")+")",D.l="("+g.l10n.weekdays.longhand.join("|")+")",D.M="("+g.l10n.months.shorthand.join("|")+")",D.F="("+g.l10n.months.longhand.join("|")+")",D.K="("+g.l10n.amPM[0]+"|"+g.l10n.amPM[1]+"|"+g.l10n.amPM[0].toLowerCase()+"|"+g.l10n.amPM[1].toLowerCase()+")",void 0===S(S({},a),JSON.parse(JSON.stringify(n.dataset||{}))).time_24hr&&void 0===A.defaultConfig.time_24hr&&(g.config.time_24hr=g.l10n.time_24hr),g.formatDate=y(g),g.parseDate=w({config:g.config,l10n:g.l10n})}function me(e){if("function"!=typeof g.config.position){if(void 0!==g.calendarContainer){we("onPreCalendarPosition");var t=e||g._positionElement,n=Array.prototype.reduce.call(g.calendarContainer.children,(function(e,t){return e+t.offsetHeight}),0),a=g.calendarContainer.offsetWidth,i=g.config.position.split(" "),o=i[0],r=i.length>1?i[1]:null,l=t.getBoundingClientRect(),c=window.innerHeight-l.bottom,s="above"===o||"below"!==o&&c<n&&l.top>n,u=window.pageYOffset+l.top+(s?-n-2:t.offsetHeight+2);if(d(g.calendarContainer,"arrowTop",!s),d(g.calendarContainer,"arrowBottom",s),!g.config.inline){var f=window.pageXOffset+l.left,m=!1,p=!1;"center"===r?(f-=(a-l.width)/2,m=!0):"right"===r&&(f-=a-l.width,p=!0),d(g.calendarContainer,"arrowLeft",!m&&!p),d(g.calendarContainer,"arrowCenter",m),d(g.calendarContainer,"arrowRight",p);var h=window.document.body.offsetWidth-(window.pageXOffset+l.right),v=f+a>window.document.body.offsetWidth,D=h+a>window.document.body.offsetWidth;if(d(g.calendarContainer,"rightMost",v),!g.config.static)if(g.calendarContainer.style.top=u+"px",v)if(D){var C=function(){for(var e=null,t=0;t<document.styleSheets.length;t++){var n=document.styleSheets[t];if(n.cssRules){try{n.cssRules}catch(e){continue}e=n;break}}return null!=e?e:(a=document.createElement("style"),document.head.appendChild(a),a.sheet);var a}();if(void 0===C)return;var y=window.document.body.offsetWidth,w=Math.max(0,y/2-a/2),b=C.cssRules.length,M="{left:"+l.left+"px;right:auto;}";d(g.calendarContainer,"rightMost",!1),d(g.calendarContainer,"centerMost",!0),C.insertRule(".flatpickr-calendar.centerMost:before,.flatpickr-calendar.centerMost:after"+M,b),g.calendarContainer.style.left=w+"px",g.calendarContainer.style.right="auto"}else g.calendarContainer.style.left="auto",g.calendarContainer.style.right=h+"px";else g.calendarContainer.style.left=f+"px",g.calendarContainer.style.right="auto"}}}else g.config.position(g,e)}function pe(){g.config.noCalendar||g.isMobile||(z(),Ee(),V())}function ge(){g._input.focus(),-1!==window.navigator.userAgent.indexOf("MSIE")||void 0!==navigator.msMaxTouchPoints?setTimeout(g.close,0):g.close()}function he(e){e.preventDefault(),e.stopPropagation();var t=f(p(e),(function(e){return e.classList&&e.classList.contains("flatpickr-day")&&!e.classList.contains("flatpickr-disabled")&&!e.classList.contains("notAllowed")}));if(void 0!==t){var n=t,a=g.latestSelectedDateObj=new Date(n.dateObj.getTime()),i=(a.getMonth()<g.currentMonth||a.getMonth()>g.currentMonth+g.config.showMonths-1)&&"range"!==g.config.mode;if(g.selectedDateElem=n,"single"===g.config.mode)g.selectedDates=[a];else if("multiple"===g.config.mode){var o=Me(a);o?g.selectedDates.splice(parseInt(o),1):g.selectedDates.push(a)}else"range"===g.config.mode&&(2===g.selectedDates.length&&g.clear(!1,!1),g.latestSelectedDateObj=a,g.selectedDates.push(a),0!==b(a,g.selectedDates[0],!0)&&g.selectedDates.sort((function(e,t){return e.getTime()-t.getTime()})));if(N(),i){var r=g.currentYear!==a.getFullYear();g.currentYear=a.getFullYear(),g.currentMonth=a.getMonth(),r&&(we("onYearChange"),z()),we("onMonthChange")}if(Ee(),V(),ke(),i||"range"===g.config.mode||1!==g.config.showMonths?void 0!==g.selectedDateElem&&void 0===g.hourElement&&g.selectedDateElem&&g.selectedDateElem.focus():q(n),void 0!==g.hourElement&&void 0!==g.hourElement&&g.hourElement.focus(),g.config.closeOnSelect){var l="single"===g.config.mode&&!g.config.enableTime,c="range"===g.config.mode&&2===g.selectedDates.length&&!g.config.enableTime;(l||c)&&ge()}j()}}g.parseDate=w({config:g.config,l10n:g.l10n}),g._handlers=[],g.pluginElements=[],g.loadedPlugins=[],g._bind=H,g._setHoursFromDate=P,g._positionCalendar=me,g.changeMonth=ee,g.changeYear=ae,g.clear=function(e,t){if(void 0===e&&(e=!0),void 0===t&&(t=!0),g.input.value="",void 0!==g.altInput&&(g.altInput.value=""),void 0!==g.mobileInput&&(g.mobileInput.value=""),g.selectedDates=[],g.latestSelectedDateObj=void 0,!0===t&&(g.currentYear=g._initialDate.getFullYear(),g.currentMonth=g._initialDate.getMonth()),!0===g.config.enableTime){var n=T(g.config);Y(n.hours,n.minutes,n.seconds)}g.redraw(),e&&we("onChange")},g.close=function(){g.isOpen=!1,g.isMobile||(void 0!==g.calendarContainer&&g.calendarContainer.classList.remove("open"),void 0!==g._input&&g._input.classList.remove("active")),we("onClose")},g.onMouseOver=ce,g._createElement=s,g.createDay=$,g.destroy=function(){void 0!==g.config&&we("onDestroy");for(var e=g._handlers.length;e--;)g._handlers[e].remove();if(g._handlers=[],g.mobileInput)g.mobileInput.parentNode&&g.mobileInput.parentNode.removeChild(g.mobileInput),g.mobileInput=void 0;else if(g.calendarContainer&&g.calendarContainer.parentNode)if(g.config.static&&g.calendarContainer.parentNode){var t=g.calendarContainer.parentNode;if(t.lastChild&&t.removeChild(t.lastChild),t.parentNode){for(;t.firstChild;)t.parentNode.insertBefore(t.firstChild,t);t.parentNode.removeChild(t)}}else g.calendarContainer.parentNode.removeChild(g.calendarContainer);g.altInput&&(g.input.type="text",g.altInput.parentNode&&g.altInput.parentNode.removeChild(g.altInput),delete g.altInput),g.input&&(g.input.type=g.input._type,g.input.classList.remove("flatpickr-input"),g.input.removeAttribute("readonly")),["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","monthsDropdownContainer","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach((function(e){try{delete g[e]}catch(e){}}))},g.isEnabled=ie,g.jumpToDate=R,g.updateValue=ke,g.open=function(e,t){if(void 0===t&&(t=g._positionElement),!0===g.isMobile){if(e){e.preventDefault();var n=p(e);n&&n.blur()}return void 0!==g.mobileInput&&(g.mobileInput.focus(),g.mobileInput.click()),void we("onOpen")}if(!g._input.disabled&&!g.config.inline){var a=g.isOpen;g.isOpen=!0,a||(g.calendarContainer.classList.add("open"),g._input.classList.add("active"),we("onOpen"),me(t)),!0===g.config.enableTime&&!0===g.config.noCalendar&&(!1!==g.config.allowInput||void 0!==e&&g.timeContainer.contains(e.relatedTarget)||setTimeout((function(){return g.hourElement.select()}),50))}},g.redraw=pe,g.set=function(t,n){if(null!==t&&"object"==typeof t)for(var a in Object.assign(g.config,t),t)void 0!==ve[a]&&ve[a].forEach((function(e){return e()}));else g.config[t]=n,void 0!==ve[t]?ve[t].forEach((function(e){return e()})):e.indexOf(t)>-1&&(g.config[t]=c(n));g.redraw(),ke(!0)},g.setDate=function(e,t,n){if(void 0===t&&(t=!1),void 0===n&&(n=g.config.dateFormat),0!==e&&!e||e instanceof Array&&0===e.length)return g.clear(t);De(e,n),g.latestSelectedDateObj=g.selectedDates[g.selectedDates.length-1],g.redraw(),R(void 0,t),P(),0===g.selectedDates.length&&g.clear(!1),ke(t),t&&we("onChange")},g.toggle=function(e){if(!0===g.isOpen)return g.close();g.open(e)};var ve={locale:[fe,X],showMonths:[Z,O,Q],minDate:[R],maxDate:[R],positionElement:[ye],clickOpens:[function(){!0===g.config.clickOpens?(H(g._input,"focus",g.open),H(g._input,"click",g.open)):(g._input.removeEventListener("focus",g.open),g._input.removeEventListener("click",g.open))}]};function De(e,t){var n=[];if(e instanceof Array)n=e.map((function(e){return g.parseDate(e,t)}));else if(e instanceof Date||"number"==typeof e)n=[g.parseDate(e,t)];else if("string"==typeof e)switch(g.config.mode){case"single":case"time":n=[g.parseDate(e,t)];break;case"multiple":n=e.split(g.config.conjunction).map((function(e){return g.parseDate(e,t)}));break;case"range":n=e.split(g.l10n.rangeSeparator).map((function(e){return g.parseDate(e,t)}))}else g.config.errorHandler(new Error("Invalid date supplied: "+JSON.stringify(e)));g.selectedDates=g.config.allowInvalidPreload?n:n.filter((function(e){return e instanceof Date&&ie(e,!1)})),"range"===g.config.mode&&g.selectedDates.sort((function(e,t){return e.getTime()-t.getTime()}))}function Ce(e){return e.slice().map((function(e){return"string"==typeof e||"number"==typeof e||e instanceof Date?g.parseDate(e,void 0,!0):e&&"object"==typeof e&&e.from&&e.to?{from:g.parseDate(e.from,void 0),to:g.parseDate(e.to,void 0)}:e})).filter((function(e){return e}))}function ye(){g._positionElement=g.config.positionElement||g._input}function we(e,t){if(void 0!==g.config){var n=g.config[e];if(void 0!==n&&n.length>0)for(var a=0;n[a]&&a<n.length;a++)n[a](g.selectedDates,g.input.value,g,t);"onChange"===e&&(g.input.dispatchEvent(be("change")),g.input.dispatchEvent(be("input")))}}function be(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function Me(e){for(var t=0;t<g.selectedDates.length;t++){var n=g.selectedDates[t];if(n instanceof Date&&0===b(n,e))return""+t}return!1}function Ee(){g.config.noCalendar||g.isMobile||!g.monthNav||(g.yearElements.forEach((function(e,t){var n=new Date(g.currentYear,g.currentMonth,1);n.setMonth(g.currentMonth+t),g.config.showMonths>1||"static"===g.config.monthSelectorType?g.monthElements[t].textContent=h(n.getMonth(),g.config.shorthandCurrentMonth,g.l10n)+" ":g.monthsDropdownContainer.value=n.getMonth().toString(),e.value=n.getFullYear().toString()})),g._hidePrevMonthArrow=void 0!==g.config.minDate&&(g.currentYear===g.config.minDate.getFullYear()?g.currentMonth<=g.config.minDate.getMonth():g.currentYear<g.config.minDate.getFullYear()),g._hideNextMonthArrow=void 0!==g.config.maxDate&&(g.currentYear===g.config.maxDate.getFullYear()?g.currentMonth+1>g.config.maxDate.getMonth():g.currentYear>g.config.maxDate.getFullYear()))}function xe(e){var t=e||(g.config.altInput?g.config.altFormat:g.config.dateFormat);return g.selectedDates.map((function(e){return g.formatDate(e,t)})).filter((function(e,t,n){return"range"!==g.config.mode||g.config.enableTime||n.indexOf(e)===t})).join("range"!==g.config.mode?g.config.conjunction:g.l10n.rangeSeparator)}function ke(e){void 0===e&&(e=!0),void 0!==g.mobileInput&&g.mobileFormatStr&&(g.mobileInput.value=void 0!==g.latestSelectedDateObj?g.formatDate(g.latestSelectedDateObj,g.mobileFormatStr):""),g.input.value=xe(g.config.dateFormat),void 0!==g.altInput&&(g.altInput.value=xe(g.config.altFormat)),!1!==e&&we("onValueUpdate")}function Te(e){var t=p(e),n=g.prevMonthNav.contains(t),a=g.nextMonthNav.contains(t);n||a?ee(n?-1:1):g.yearElements.indexOf(t)>=0?t.select():t.classList.contains("arrowUp")?g.changeYear(g.currentYear+1):t.classList.contains("arrowDown")&&g.changeYear(g.currentYear-1)}return function(){g.element=g.input=n,g.isOpen=!1,function(){var i=["wrap","weekNumbers","allowInput","allowInvalidPreload","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],o=S(S({},JSON.parse(JSON.stringify(n.dataset||{}))),a),r={};g.config.parseDate=o.parseDate,g.config.formatDate=o.formatDate,Object.defineProperty(g.config,"enable",{get:function(){return g.config._enable},set:function(e){g.config._enable=Ce(e)}}),Object.defineProperty(g.config,"disable",{get:function(){return g.config._disable},set:function(e){g.config._disable=Ce(e)}});var l="time"===o.mode;if(!o.dateFormat&&(o.enableTime||l)){var d=A.defaultConfig.dateFormat||t.dateFormat;r.dateFormat=o.noCalendar||l?"H:i"+(o.enableSeconds?":S":""):d+" H:i"+(o.enableSeconds?":S":"")}if(o.altInput&&(o.enableTime||l)&&!o.altFormat){var s=A.defaultConfig.altFormat||t.altFormat;r.altFormat=o.noCalendar||l?"h:i"+(o.enableSeconds?":S K":" K"):s+" h:i"+(o.enableSeconds?":S":"")+" K"}Object.defineProperty(g.config,"minDate",{get:function(){return g.config._minDate},set:se("min")}),Object.defineProperty(g.config,"maxDate",{get:function(){return g.config._maxDate},set:se("max")});var u=function(e){return function(t){g.config["min"===e?"_minTime":"_maxTime"]=g.parseDate(t,"H:i:S")}};Object.defineProperty(g.config,"minTime",{get:function(){return g.config._minTime},set:u("min")}),Object.defineProperty(g.config,"maxTime",{get:function(){return g.config._maxTime},set:u("max")}),"time"===o.mode&&(g.config.noCalendar=!0,g.config.enableTime=!0),Object.assign(g.config,r,o);for(var f=0;f<i.length;f++)g.config[i[f]]=!0===g.config[i[f]]||"true"===g.config[i[f]];for(e.filter((function(e){return void 0!==g.config[e]})).forEach((function(e){g.config[e]=c(g.config[e]||[]).map(C)})),g.isMobile=!g.config.disableMobile&&!g.config.inline&&"single"===g.config.mode&&!g.config.disable.length&&!g.config.enable&&!g.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),f=0;f<g.config.plugins.length;f++){var m=g.config.plugins[f](g)||{};for(var p in m)e.indexOf(p)>-1?g.config[p]=c(m[p]).map(C).concat(g.config[p]):void 0===o[p]&&(g.config[p]=m[p])}o.altInputClass||(g.config.altInputClass=ue().className+" "+g.config.altInputClass),we("onParseConfig")}(),fe(),g.input=ue(),g.input?(g.input._type=g.input.type,g.input.type="text",g.input.classList.add("flatpickr-input"),g._input=g.input,g.config.altInput&&(g.altInput=s(g.input.nodeName,g.config.altInputClass),g._input=g.altInput,g.altInput.placeholder=g.input.placeholder,g.altInput.disabled=g.input.disabled,g.altInput.required=g.input.required,g.altInput.tabIndex=g.input.tabIndex,g.altInput.type="text",g.input.setAttribute("type","hidden"),!g.config.static&&g.input.parentNode&&g.input.parentNode.insertBefore(g.altInput,g.input.nextSibling)),g.config.allowInput||g._input.setAttribute("readonly","readonly"),ye()):g.config.errorHandler(new Error("Invalid input element specified")),function(){g.selectedDates=[],g.now=g.parseDate(g.config.now)||new Date;var e=g.config.defaultDate||("INPUT"!==g.input.nodeName&&"TEXTAREA"!==g.input.nodeName||!g.input.placeholder||g.input.value!==g.input.placeholder?g.input.value:null);e&&De(e,g.config.dateFormat),g._initialDate=g.selectedDates.length>0?g.selectedDates[0]:g.config.minDate&&g.config.minDate.getTime()>g.now.getTime()?g.config.minDate:g.config.maxDate&&g.config.maxDate.getTime()<g.now.getTime()?g.config.maxDate:g.now,g.currentYear=g._initialDate.getFullYear(),g.currentMonth=g._initialDate.getMonth(),g.selectedDates.length>0&&(g.latestSelectedDateObj=g.selectedDates[0]),void 0!==g.config.minTime&&(g.config.minTime=g.parseDate(g.config.minTime,"H:i")),void 0!==g.config.maxTime&&(g.config.maxTime=g.parseDate(g.config.maxTime,"H:i")),g.minDateHasTime=!!g.config.minDate&&(g.config.minDate.getHours()>0||g.config.minDate.getMinutes()>0||g.config.minDate.getSeconds()>0),g.maxDateHasTime=!!g.config.maxDate&&(g.config.maxDate.getHours()>0||g.config.maxDate.getMinutes()>0||g.config.maxDate.getSeconds()>0)}(),g.utils={getDaysInMonth:function(e,t){return void 0===e&&(e=g.currentMonth),void 0===t&&(t=g.currentYear),1===e&&(t%4==0&&t%100!=0||t%400==0)?29:g.l10n.daysInMonth[e]}},g.isMobile||function(){var e=window.document.createDocumentFragment();if(g.calendarContainer=s("div","flatpickr-calendar"),g.calendarContainer.tabIndex=-1,!g.config.noCalendar){if(e.appendChild((g.monthNav=s("div","flatpickr-months"),g.yearElements=[],g.monthElements=[],g.prevMonthNav=s("span","flatpickr-prev-month"),g.prevMonthNav.innerHTML=g.config.prevArrow,g.nextMonthNav=s("span","flatpickr-next-month"),g.nextMonthNav.innerHTML=g.config.nextArrow,Z(),Object.defineProperty(g,"_hidePrevMonthArrow",{get:function(){return g.__hidePrevMonthArrow},set:function(e){g.__hidePrevMonthArrow!==e&&(d(g.prevMonthNav,"flatpickr-disabled",e),g.__hidePrevMonthArrow=e)}}),Object.defineProperty(g,"_hideNextMonthArrow",{get:function(){return g.__hideNextMonthArrow},set:function(e){g.__hideNextMonthArrow!==e&&(d(g.nextMonthNav,"flatpickr-disabled",e),g.__hideNextMonthArrow=e)}}),g.currentYearElement=g.yearElements[0],Ee(),g.monthNav)),g.innerContainer=s("div","flatpickr-innerContainer"),g.config.weekNumbers){var t=function(){g.calendarContainer.classList.add("hasWeeks");var e=s("div","flatpickr-weekwrapper");e.appendChild(s("span","flatpickr-weekday",g.l10n.weekAbbreviation));var t=s("div","flatpickr-weeks");return e.appendChild(t),{weekWrapper:e,weekNumbers:t}}(),n=t.weekWrapper,a=t.weekNumbers;g.innerContainer.appendChild(n),g.weekNumbers=a,g.weekWrapper=n}g.rContainer=s("div","flatpickr-rContainer"),g.rContainer.appendChild(Q()),g.daysContainer||(g.daysContainer=s("div","flatpickr-days"),g.daysContainer.tabIndex=-1),V(),g.rContainer.appendChild(g.daysContainer),g.innerContainer.appendChild(g.rContainer),e.appendChild(g.innerContainer)}g.config.enableTime&&e.appendChild(function(){g.calendarContainer.classList.add("hasTime"),g.config.noCalendar&&g.calendarContainer.classList.add("noCalendar");var e=T(g.config);g.timeContainer=s("div","flatpickr-time"),g.timeContainer.tabIndex=-1;var t=s("span","flatpickr-time-separator",":"),n=m("flatpickr-hour",{"aria-label":g.l10n.hourAriaLabel});g.hourElement=n.getElementsByTagName("input")[0];var a=m("flatpickr-minute",{"aria-label":g.l10n.minuteAriaLabel});if(g.minuteElement=a.getElementsByTagName("input")[0],g.hourElement.tabIndex=g.minuteElement.tabIndex=-1,g.hourElement.value=o(g.latestSelectedDateObj?g.latestSelectedDateObj.getHours():g.config.time_24hr?e.hours:function(e){switch(e%24){case 0:case 12:return 12;default:return e%12}}(e.hours)),g.minuteElement.value=o(g.latestSelectedDateObj?g.latestSelectedDateObj.getMinutes():e.minutes),g.hourElement.setAttribute("step",g.config.hourIncrement.toString()),g.minuteElement.setAttribute("step",g.config.minuteIncrement.toString()),g.hourElement.setAttribute("min",g.config.time_24hr?"0":"1"),g.hourElement.setAttribute("max",g.config.time_24hr?"23":"12"),g.hourElement.setAttribute("maxlength","2"),g.minuteElement.setAttribute("min","0"),g.minuteElement.setAttribute("max","59"),g.minuteElement.setAttribute("maxlength","2"),g.timeContainer.appendChild(n),g.timeContainer.appendChild(t),g.timeContainer.appendChild(a),g.config.time_24hr&&g.timeContainer.classList.add("time24hr"),g.config.enableSeconds){g.timeContainer.classList.add("hasSeconds");var i=m("flatpickr-second");g.secondElement=i.getElementsByTagName("input")[0],g.secondElement.value=o(g.latestSelectedDateObj?g.latestSelectedDateObj.getSeconds():e.seconds),g.secondElement.setAttribute("step",g.minuteElement.getAttribute("step")),g.secondElement.setAttribute("min","0"),g.secondElement.setAttribute("max","59"),g.secondElement.setAttribute("maxlength","2"),g.timeContainer.appendChild(s("span","flatpickr-time-separator",":")),g.timeContainer.appendChild(i)}return g.config.time_24hr||(g.amPM=s("span","flatpickr-am-pm",g.l10n.amPM[r((g.latestSelectedDateObj?g.hourElement.value:g.config.defaultHour)>11)]),g.amPM.title=g.l10n.toggleTitle,g.amPM.tabIndex=-1,g.timeContainer.appendChild(g.amPM)),g.timeContainer}()),d(g.calendarContainer,"rangeMode","range"===g.config.mode),d(g.calendarContainer,"animate",!0===g.config.animate),d(g.calendarContainer,"multiMonth",g.config.showMonths>1),g.calendarContainer.appendChild(e);var i=void 0!==g.config.appendTo&&void 0!==g.config.appendTo.nodeType;if((g.config.inline||g.config.static)&&(g.calendarContainer.classList.add(g.config.inline?"inline":"static"),g.config.inline&&(!i&&g.element.parentNode?g.element.parentNode.insertBefore(g.calendarContainer,g._input.nextSibling):void 0!==g.config.appendTo&&g.config.appendTo.appendChild(g.calendarContainer)),g.config.static)){var l=s("div","flatpickr-wrapper");g.element.parentNode&&g.element.parentNode.insertBefore(l,g.element),l.appendChild(g.element),g.altInput&&l.appendChild(g.altInput),l.appendChild(g.calendarContainer)}g.config.static||g.config.inline||(void 0!==g.config.appendTo?g.config.appendTo:window.document.body).appendChild(g.calendarContainer)}(),function(){if(g.config.wrap&&["open","close","toggle","clear"].forEach((function(e){Array.prototype.forEach.call(g.element.querySelectorAll("[data-"+e+"]"),(function(t){return H(t,"click",g[e])}))})),g.isMobile)!function(){var e=g.config.enableTime?g.config.noCalendar?"time":"datetime-local":"date";g.mobileInput=s("input",g.input.className+" flatpickr-mobile"),g.mobileInput.tabIndex=1,g.mobileInput.type=e,g.mobileInput.disabled=g.input.disabled,g.mobileInput.required=g.input.required,g.mobileInput.placeholder=g.input.placeholder,g.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",g.selectedDates.length>0&&(g.mobileInput.defaultValue=g.mobileInput.value=g.formatDate(g.selectedDates[0],g.mobileFormatStr)),g.config.minDate&&(g.mobileInput.min=g.formatDate(g.config.minDate,"Y-m-d")),g.config.maxDate&&(g.mobileInput.max=g.formatDate(g.config.maxDate,"Y-m-d")),g.input.getAttribute("step")&&(g.mobileInput.step=String(g.input.getAttribute("step"))),g.input.type="hidden",void 0!==g.altInput&&(g.altInput.type="hidden");try{g.input.parentNode&&g.input.parentNode.insertBefore(g.mobileInput,g.input.nextSibling)}catch(e){}H(g.mobileInput,"change",(function(e){g.setDate(p(e).value,!1,g.mobileFormatStr),we("onChange"),we("onClose")}))}();else{var e=l(de,50);if(g._debouncedChange=l(j,_),g.daysContainer&&!/iPhone|iPad|iPod/i.test(navigator.userAgent)&&H(g.daysContainer,"mouseover",(function(e){"range"===g.config.mode&&ce(p(e))})),H(g._input,"keydown",le),void 0!==g.calendarContainer&&H(g.calendarContainer,"keydown",le),g.config.inline||g.config.static||H(window,"resize",e),void 0!==window.ontouchstart?H(window.document,"touchstart",ne):H(window.document,"mousedown",ne),H(window.document,"focus",ne,{capture:!0}),!0===g.config.clickOpens&&(H(g._input,"focus",g.open),H(g._input,"click",g.open)),void 0!==g.daysContainer&&(H(g.monthNav,"click",Te),H(g.monthNav,["keyup","increment"],L),H(g.daysContainer,"click",he)),void 0!==g.timeContainer&&void 0!==g.minuteElement&&void 0!==g.hourElement){H(g.timeContainer,["increment"],F),H(g.timeContainer,"blur",F,{capture:!0}),H(g.timeContainer,"click",W),H([g.hourElement,g.minuteElement],["focus","click"],(function(e){return p(e).select()})),void 0!==g.secondElement&&H(g.secondElement,"focus",(function(){return g.secondElement&&g.secondElement.select()})),void 0!==g.amPM&&H(g.amPM,"click",(function(e){F(e)}))}g.config.allowInput&&H(g._input,"blur",re)}}(),(g.selectedDates.length||g.config.noCalendar)&&(g.config.enableTime&&P(g.config.noCalendar?g.latestSelectedDateObj:void 0),ke(!1)),O();var i=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);!g.isMobile&&i&&me(),we("onReady")}(),g}function F(e,t){for(var n=Array.prototype.slice.call(e).filter((function(e){return e instanceof HTMLElement})),a=[],i=0;i<n.length;i++){var o=n[i];try{if(null!==o.getAttribute("data-fp-omit"))continue;void 0!==o._flatpickr&&(o._flatpickr.destroy(),o._flatpickr=void 0),o._flatpickr=O(o,t||{}),a.push(o._flatpickr)}catch(e){console.error(e)}}return 1===a.length?a[0]:a}"undefined"!=typeof HTMLElement&&"undefined"!=typeof HTMLCollection&&"undefined"!=typeof NodeList&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return F(this,e)},HTMLElement.prototype.flatpickr=function(e){return F([this],e)});var A=function(e,t){return"string"==typeof e?F(window.document.querySelectorAll(e),t):e instanceof Node?F([e],t):F(e,t)};A.defaultConfig={},A.l10ns={en:S({},i),default:S({},i)},A.localize=function(e){A.l10ns.default=S(S({},A.l10ns.default),e)},A.setDefaults=function(e){A.defaultConfig=S(S({},A.defaultConfig),e)},A.parseDate=w({}),A.formatDate=y({}),A.compareDates=b,"undefined"!=typeof jQuery&&void 0!==jQuery.fn&&(jQuery.fn.flatpickr=function(e){return F(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof e?parseInt(e,10):e))},"undefined"!=typeof window&&(window.flatpickr=A);const N=A,P=document.createElement("div");P.classList.add("form");const Y=(e,t)=>{const n=document.createElement("input");return n.id=e,n.type=t,n},L=e=>{const t=document.createElement("label");return t.htmlFor=e,t},H=Y("title","text"),j=L("title");P.appendChild(j),P.appendChild(H);const R=Y("description","text"),W=L("description");P.appendChild(W),P.appendChild(R);const B=Y("date","text"),$=(N(B,{}),L("date"));P.appendChild($),P.appendChild(B);const q=Y("priorityText","color"),J=L("priorityText");P.appendChild(J),P.appendChild(q);const K=Y("priorityBackground","color"),U=L("priorityBackground");P.appendChild(U),P.appendChild(K);const V=document.createElement("span");q.value="#00FF59",q.value="#000000",V.innerHTML="preview",P.appendChild(V),H.addEventListener("input",(e=>{V.textContent=e.target.value,z()}));const z=()=>{V.style.color=`${q.value}`,V.style.backgroundColor=`${K.value}`};K.addEventListener("input",(()=>z())),q.addEventListener("input",(()=>z()));const G=document.createElement("button");G.textContent="done",P.appendChild(G),document.querySelector(".addlist").addEventListener("click",(()=>{P.classList.toggle("hideform"),document.getElementById("dropdowncontainer").appendChild(P)}));const Z=[];const Q=document.getElementById("content");let X=!1,ee=!0;const te=[];function ne(e,t){const n=document.createElement("div");return n.classList.add(`no${t}`),n.innerHTML=`${e.title}  ${e.description} ${e.date}`,n.style.color=`${e.priorityT}`,n.style.backgroundColor=`${e.priorityB}`,n}function ae(e){Q.innerHTML="",e.forEach(((e,t)=>{const n=ne(e,t),a=function(e){const t=document.createElement("button");return t.classList.add(`no${e}`),t.classList.add("delete"),t.addEventListener("click",(()=>{Z.splice(e,1),ae(Z)})),t}(t),i=function(e){const t=document.createElement("button");return t.classList.add(`no${e}`),t.classList.add("finished"),t.addEventListener("click",(()=>{const t=Z.splice(e,1)[0]||{};te.push(t),ae(Z)})),t}(t);n.appendChild(i),n.appendChild(a),Q.appendChild(n)}))}function ie(e){Q.innerHTML="",e.forEach(((e,t)=>{const n=ne(e,t);Q.appendChild(n)}))}function oe(e){return[...e].sort(((e,t)=>{const n=new Date(e.date),a=new Date(t.date);return X?a-n:n-a}))}G.addEventListener("click",(()=>{(function(){if(""===H.value)return void H.classList.add("invalid");H.classList.remove("invalid");const e=function(e,t,n,a,i){const o={title:e},r={description:t},l={date:n},c={priorityT:a},d={priorityB:i};return Object.assign({},o,r,l,c,d)}(H.value,R.value,B.value,q.value,K.value);Z.push(e)})(),ae(Z)})),document.querySelector(".todolist").addEventListener("click",(()=>{ee=!0,X=!0,ae(Z)})),document.querySelector(".done").addEventListener("click",(()=>{ee=!1,X=!0,ie(te)})),document.querySelector(".sortByDate").addEventListener("click",(()=>{const e=oe(Z),t=oe(te);ee?ae(e):ie(t),X=!X})),document.querySelector(".history")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,